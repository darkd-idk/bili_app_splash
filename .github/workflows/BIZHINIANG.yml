name: Wallpaper Girl Sync

on:
  workflow_dispatch:
  schedule:
    - cron: '10 1 * * *'  # UTC 01:10 (北京 09:10)
  
  # 防止自触发循环
  push:
    paths-ignore:
      - 'bizhiniang/**'
      - 'urls.txt'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sync-wallpapers:
    name: Synchronize Wallpaper Images
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      OUTPUT_DIR: bizhiniang
      REPORT_FILE: wallpapers_report.md
      URL_LIST_FILE: urls.txt
      SCRIPT_FILE: getwallpaper.py

    steps:
      # 步骤1: 准备环境
      - name: Configure Environment
        run: |
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "GITHUB_RUN_ID: $GITHUB_RUN_ID"
          echo "RUNNER_OS: $RUNNER_OS"
        shell: bash

      # 步骤2: 检出仓库（稀疏检出）
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: |
            ${{ env.SCRIPT_FILE }}
            requirements.txt
            ${{ env.OUTPUT_DIR }}/
            .github/
          sparse-checkout-cone-mode: false
          persist-credentials: true

      # 步骤3: 设置Python环境
      - name: Setup Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      # 步骤4: 安装依赖
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip cache purge
          pip install -r requirements.txt

      # 步骤5: 执行下载
      - name: Download Wallpapers
        env:
          SESSDATA: ${{ secrets.SESSDATA }}
        run: |
          set -euo pipefail
          
          # 验证环境变量
          if [ -z "${SESSDATA}" ]; then
            echo "::error::Missing SESSDATA environment variable"
            exit 1
          fi
          
          echo "Starting wallpaper download..."
          python ${{ env.SCRIPT_FILE }} \
            --sessdata "${SESSDATA}" \
            --output "${{ env.OUTPUT_DIR }}" \
            --log-file wallpaper.log \
            || echo "::warning::Download completed with warnings"
          
          echo "Completed download process"
        
      # 步骤6: 准备提交
      - name: Configure Git Settings
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions@users.noreply.github.com"
          git config --global pull.rebase false
          git config --global http.postBuffer 157286400  # 150MB buffer for large repos

      # 步骤7: 提交变更
      - name: Commit Changes
        run: |
          set -euo pipefail
          
          # 检查变更
          git status --short
          
          # 仅添加下载目录和URL列表
          git add "${{ env.OUTPUT_DIR }}"
          git add "${{ env.URL_LIST_FILE }}"
          
          if ! git diff-index --quiet HEAD --; then
            echo "Changes detected, committing..."
            git commit -m "🖼️ Automated wallpaper sync [skip ci]"
            echo "Changes committed"
          else
            echo "No changes to commit"
          fi

      # 步骤8: 推送变更
      - name: Push Changes
        run: |
          set -euo pipefail
          
          # 安全推送配置
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          
          # 限速推送 (300KB/s)
          git config --global http.lowSpeedLimit 300
          git config --global http.lowSpeedTime 60
          
          # 重试逻辑
          retry_count=0
          max_retries=3
          
          while [ $retry_count -lt $max_retries ]; do
            if git push origin HEAD:$GITHUB_REF_NAME; then
              echo "Push successful"
              exit 0
            else
              retry_count=$((retry_count + 1))
              echo "Push failed, retry $retry_count/$max_retries in 10 seconds"
              sleep 10
            fi
          done
          
          echo "::error::Push failed after $max_retries attempts"
          exit 1
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      # 步骤9: 生成报告
      - name: Generate Wallpaper Report
        run: |
          set -euo pipefail
          
          # 计算统计信息
          album_count=0
          file_count=0
          
          if [ -d "${{ env.OUTPUT_DIR }}" ]; then
            album_count=$(find "${{ env.OUTPUT_DIR }}" -mindepth 1 -maxdepth 1 -type d | wc -l)
            file_count=$(find "${{ env.OUTPUT_DIR }}" -type f | wc -l)
          fi
          
          # 生成 Markdown 报告
          cat > "${{ env.REPORT_FILE }}" << EOF
          # Wallpaper Sync Report
          
          ## Summary
          | Metric | Value |
          |---|---|
          | **Sync Time** | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |
          | **Workflow Run** | [Link](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID) |
          | **Output Directory** | ${{ env.OUTPUT_DIR }} |
          | **Album Count** | $album_count |
          | **Image Count** | $file_count |
          | **Git Reference** | ${{ github.ref_name }} |
          
          ## Latest Albums
          \`\`\`
          $(ls -lt "${{ env.OUTPUT_DIR }}" | head -n 6)
          \`\`\`
          
          ## URL Statistics
          \`\`\`
          $(wc -l < "${{ env.URL_LIST_FILE }}" | xargs) URLs recorded
          \`\`\`
          EOF
          
          echo "Generated report at ${{ env.REPORT_FILE }}"
          
      # 步骤10: 上传制品
      - name: Upload Sync Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wallpaper-sync-artifacts
          path: |
            ${{ env.REPORT_FILE }}
            ${{ env.URL_LIST_FILE }}
            wallpaper.log
          retention-days: 14
          if-no-files-found: warn
          
      # 步骤11: 最终状态报告
      - name: Final Status
        run: |
          echo "========== WALLPAPER SYNC COMPLETE =========="
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Workflow: $GITHUB_WORKFLOW"
          echo "Run ID: $GITHUB_RUN_ID"
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Result: ✅ Success"
          echo "============================================="
