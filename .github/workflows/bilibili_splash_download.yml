name: Bilibili Splash Sync

on:
  workflow_dispatch:
  schedule:
    - cron: '1 20 * * *'  # UTC时间20:01（北京时间次日04:01）
  push:
    branches:
      - main
    paths-ignore:
      - 'app_splash/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sync-splash-images:
    name: 同步B站开屏图
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 检出代码库
        uses: actions/checkout@v4
        with:
          # 优化大型仓库的检出选项
          fetch-depth: 1  # 只获取最近一次提交
          sparse-checkout: |  # 只检出必要的文件
            get_app_splash.py
            requirements.txt
            .github/
            app_splash/
          sparse-checkout-cone-mode: false
          lfs: false  # 除非明确需要

      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: 下载开屏图
        run: |
          python get_app_splash.py || echo "下载过程中出现错误"
        shell: bash

      - name: 配置Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'non-reply@github.com'

      - name: 提交变更
        run: |
          # 检查是否有变更需要提交
          if ! git diff --quiet || ! git diff --staged --quiet; then
            git add .
            git commit -m "自动更新开屏图 - $(date +'%Y-%m-%d %H:%M')"
          else
            echo "没有需要提交的变更"
          fi
        shell: bash

      - name: 推送到仓库
        run: |
          # 安全推送变更
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          
          # 尝试推送，最多重试3次
          n=0
          until [ "$n" -ge 3 ]
          do
             git push origin HEAD:$GITHUB_REF_NAME && break
             n=$((n+1))
             echo "推送失败，10秒后重试..."
             sleep 10
          done
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
        shell: bash

      - name: 生成Markdown报告
        run: |
          # 安全的图片计数
          if [ -d app_splash ]; then
            image_count=$(find app_splash -maxdepth 1 -type f $ -name "*.jpg" -o -name "*.png" -o -name "*.webp" $ 2>/dev/null | wc -l)
          else
            image_count=0
          fi
          
          # 获取最新5个文件（避免管道错误）
          if [ -d app_splash ] && [ "$(ls -A app_splash 2>/dev/null)" ]; then
            latest_files=$(ls -t app_splash 2>/dev/null | head -n 5 | awk '{print "- "$0}')
          else
            latest_files="- 没有找到文件"
          fi
          
          # 生成报告
          cat << EOF > report.md
# B站开屏图同步报告

**同步时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
**图片总数**: $image_count

## 最新5个文件
$latest_files

## 状态
✅ 所有文件已成功同步
EOF
        shell: bash

      - name: 上传报告制品
        uses: actions/upload-artifact@v4
        with:
          name: splash-report
          path: |
            report.md
            app_splash/download_report.json
          retention-days: 7
