name: Bilibili Splash Download

on:
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug logging'
        required: false
        type: boolean
        default: false
  schedule:
    - cron: '0 * * * *'  # 每小时运行一次
  
  push:
    paths-ignore:
      - 'splash/**'

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  download-splash:
    name: "Download Bilibili Splash Images"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      SPLASH_DIR: 'splash'
      SCRIPT_FILE: 'splash_downloader.py'
      URL_LIST_FILE: 'splash_urls.txt'
      LOG_FILE: 'splash.log'
      PYTHON_VERSION: '3.11'

    steps:
      # 步骤1: 准备环境
      - name: "Setup Environment"
        run: |
          echo "🛠️ WORKFLOW STARTED AT: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Run ID: $GITHUB_RUN_ID"
          echo "Debug Enabled: ${{ inputs.debug }}"
          echo "Existing splash directory:"
          ls -la splash/ || true

      # 步骤2: 检出仓库
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 完整检出历史记录

      # 步骤3: 设置Python环境
      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      # 步骤4: 准备输出目录
      - name: "Prepare Output Directory"
        run: |
          mkdir -p "$SPLASH_DIR"
          touch "$URL_LIST_FILE"
          echo "📁 Output directory prepared: $SPLASH_DIR"

      # 步骤5: 执行开屏图下载
      - name: "Download Splash Images"
        id: download-step
        run: |
          set -euo pipefail
          
          # 构建命令行参数
          cmd_args=(
            "--output" "$SPLASH_DIR"
            "--url-file" "$URL_LIST_FILE"
            "--log-file" "$LOG_FILE"
          )
          
          if [ "${{ inputs.debug }}" = "true" ]; then
            cmd_args+=("--debug")
            echo "🐛 Debug mode enabled"
          fi
          
          echo "🚀 Starting splash image download..."
          
          # 执行下载命令
          if python "$SCRIPT_FILE" "${cmd_args[@]}"; then
            echo "DOWNLOAD_STATUS=Success" >> $GITHUB_ENV
            echo "✅ Download completed successfully"
          else
            echo "DOWNLOAD_STATUS=Failed" >> $GITHUB_ENV
            echo "❌ Download encountered errors"
          fi
          
          # 计算新文件数
          NEW_FILES_COUNT=$(find "$SPLASH_DIR" -type f -mmin -5 | wc -l) || 0
          echo "NEW_FILES_COUNT=$NEW_FILES_COUNT" >> $GITHUB_ENV
          echo "📥 Downloaded $NEW_FILES_COUNT new files"

      # 步骤6: 调试日志
      - name: "Debug Log"
        if: ${{ env.DOWNLOAD_STATUS != 'Success' || env.NEW_FILES_COUNT == 0 }}
        run: |
          echo "🔍 Download Log Contents:"
          cat "$LOG_FILE" || true
          
          echo "API Response Analysis:"
          
          if grep -q "Cloudflare" "$LOG_FILE"; then
            echo "::error::Cloudflare challenge detected"
          fi
          
          if grep -q "JSONDecodeError" "$LOG_FILE"; then
            echo "::error::JSON parsing failed"
          fi
          
          echo "Network Connectivity Test:"
          curl -I "https://app.bilibili.com" -v || true

      # 步骤7: 准备Git配置
      - name: "Setup Git Identity"
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions@users.noreply.github.com"
          echo "👤 Git user configured"

      # 步骤8: 检查变更状态
      - name: "Check Changes"
        run: |
          set -euo pipefail
          
          # 检查目录是否存在
          if [ ! -d "$SPLASH_DIR" ]; then
            echo "❌ ERROR: Splash directory '$SPLASH_DIR' does not exist!"
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # 方法1: 检查未跟踪文件
          untracked_files=$(git ls-files --others --exclude-standard)
          if [ -n "$untracked_files" ]; then
            echo "🔄 Changes detected: untracked files"
            HAS_CHANGES="true"
          else
            HAS_CHANGES="false"
          fi
          
          # 方法2: 检查已修改文件
          if [ "$HAS_CHANGES" = "false" ] && ! git diff --quiet; then
            echo "🔄 Changes detected: modified files"
            HAS_CHANGES="true"
          fi
          
          # 方法3: 如果有新文件但Git没检测到
          if [ "$NEW_FILES_COUNT" -gt 0 ] && [ "$HAS_CHANGES" = "false" ]; then
            echo "⚠️ $NEW_FILES_COUNT new files but Git not detecting changes"
            echo "🔄 Forcing detection of new files"
            git add "$SPLASH_DIR" || true
            HAS_CHANGES="true"
          fi
          
          # 设置环境变量
          echo "HAS_CHANGES=$HAS_CHANGES" >> $GITHUB_ENV
          echo "🔄 Changes detected: $HAS_CHANGES"

      # 步骤9: 提交变更
      - name: "Commit Changes"
        if: ${{ env.HAS_CHANGES == 'true' && env.DOWNLOAD_STATUS == 'Success' }}
        run: |
          set -euo pipefail
          
          # 添加所有已更改的文件
          echo "➕ Adding changed files..."
          git add "$SPLASH_DIR" || true
          git add "$URL_LIST_FILE" || true
          
          # 显示添加后的状态
          echo "📋 Staged changes:"
          git diff --cached --name-only
          
          # 计算实际变更多少文件
          change_count=$(git diff --cached --name-only | wc -l) || 0
          echo "📈 Detected $change_count file changes"
          
          # 提交变更
          if [ "$change_count" -gt 0 ]; then
            echo "💾 Committing changes..."
            git commit -m "🌅 Automated splash image update [skip ci]"
            echo "✅ Changes committed"
          else
            echo "🟢 No files to commit after staging"
          fi

      # 步骤10: 推送变更
      - name: "Push Changes"
        if: ${{ env.HAS_CHANGES == 'true' && env.DOWNLOAD_STATUS == 'Success' }}
        run: |
          set -euo pipefail
          
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY"
          
          echo "🚚 Pushing changes..."
          
          # 最大重试次数
          max_retries=3
          
          for i in $(seq 1 $max_retries); do
            if git push origin HEAD:$GITHUB_REF_NAME; then
              echo "🚀 Push successful"
              exit 0
            else
              echo "⚠️ Push failed, retry $i/$max_retries in 10s"
              sleep 10
            fi
          done
          
          echo "::error::Push failed after $max_retries attempts"
          exit 1

      # 步骤11: 最终状态报告
      - name: "Final Report"
        run: |
          echo "🏁 WORKFLOW COMPLETED: $DOWNLOAD_STATUS"
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "New files downloaded: $NEW_FILES_COUNT"
          echo "Changes committed: $HAS_CHANGES"
          
          # 如果失败，使任务标记为失败
          if [ "$DOWNLOAD_STATUS" = "Failed" ]; then
            echo "::error::Splash image download failed"
            exit 1
          fi
