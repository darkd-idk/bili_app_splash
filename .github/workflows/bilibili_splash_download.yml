name: Bilibili Splash Download

on:
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug logging'
        required: false
        type: boolean
        default: false
  schedule:
    - cron: '0 * * * *'  # ÊØèÂ∞èÊó∂ËøêË°å‰∏ÄÊ¨°
  
  push:
    paths-ignore:
      - 'app_splash/**'

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  download-splash:
    name: "Download Bilibili Splash Images"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      OUTPUT_DIR: 'app_splash'
      SCRIPT_FILE: 'splash_downloader.py'
      LOG_FILE: 'splash.log'

    steps:
      # Ê≠•È™§1: ÂáÜÂ§áÁéØÂ¢É
      - name: "Setup Environment"
        run: |
          echo "üõ†Ô∏è WORKFLOW STARTED AT: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Run ID: $GITHUB_RUN_ID"
          echo "Debug Enabled: ${{ inputs.debug }}"
          echo "Existing splash directory:"
          ls -la $OUTPUT_DIR || true
          echo "Python version: $(python --version)"

      # Ê≠•È™§2: Ê£ÄÂá∫‰ªìÂ∫ì
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Ê≠•È™§3: ËÆæÁΩÆPythonÁéØÂ¢É
      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: "pip"

      # Ê≠•È™§4: ÂÆâË£Ö‰æùËµñ
      - name: "Install Dependencies"
        run: |
          echo "üì¶ Installing Python dependencies..."
          python -m pip install --upgrade pip
          pip install requests
          echo "‚úÖ Requests installed: $(pip show requests | grep Version)"
          echo "Installed packages: $(pip freeze)"

      # Ê≠•È™§5: ÊâßË°åÂºÄÂ±èÂõæ‰∏ãËΩΩ
      - name: "Download Splash Images"
        run: |
          set -euo pipefail
          
          # ÊûÑÂª∫ÂëΩ‰ª§Ë°åÂèÇÊï∞
          cmd_args=(
            "--output" "$OUTPUT_DIR"
            "--log-file" "$LOG_FILE"
          )
          
          if [ "${{ inputs.debug }}" = "true" ]; then
            cmd_args+=("--debug")
            echo "üêõ Debug mode enabled"
          fi
          
          echo "üöÄ Starting splash image download..."
          echo "Python path: $(which python)"
          
          # ÊâßË°å‰∏ãËΩΩÂëΩ‰ª§
          if python "$SCRIPT_FILE" "${cmd_args[@]}"; then
            echo "DOWNLOAD_STATUS=Success" >> $GITHUB_ENV
            echo "‚úÖ Download completed successfully"
          else
            echo "DOWNLOAD_STATUS=Failed" >> $GITHUB_ENV
            echo "‚ùå Download encountered errors"
          fi
          
          # ËÆ°ÁÆóÊñ∞Êñá‰ª∂Êï∞
          new_files=0
          if [ -d "$OUTPUT_DIR" ]; then
            new_files=$(find "$OUTPUT_DIR" -type f -name '*.jp*' -mmin -5 | wc -l) || 0
          fi
          echo "NEW_FILES_COUNT=$new_files" >> $GITHUB_ENV
          echo "üì• Downloaded $new_files new files"

      # Ê≠•È™§6: Ë∞ÉËØïÊó•Âøó
      - name: "Debug Log"
        if: ${{ env.DOWNLOAD_STATUS != 'Success' || env.NEW_FILES_COUNT == 0 }}
        run: |
          echo "üîç Download Log Contents:"
          cat "$LOG_FILE" || true
          
          # Ê£ÄÊü•Â∏∏ËßÅÈóÆÈ¢ò
          if grep -q "Invalid JSON response" "$LOG_FILE"; then
            echo "::error::Received non-JSON API response"
          fi
          
          if grep -q "API error" "$LOG_FILE"; then
            echo "::error::API returned an error"
          fi
          
          if grep -q "Invalid API response structure" "$LOG_FILE"; then
            echo "::error::API response structure is invalid"
          fi

      # Ê≠•È™§7: ÁΩëÁªúËØäÊñ≠
      - name: "Network Diagnosis"
        if: ${{ env.DOWNLOAD_STATUS != 'Success' }}
        run: |
          echo "üåê Network Diagnosis:"
          echo "--- Basic connectivity ---"
          ping -c 3 app.bilibili.com || true
          
          echo "--- DNS Lookup ---"
          nslookup app.bilibili.com || true
          
          echo "--- HTTPS Access ---"
          curl -I https://app.bilibili.com -v || true
          
          echo "--- IP Information ---"
          curl -s https://ipinfo.io/json || true

      # Ê≠•È™§8: ÂáÜÂ§áGitÈÖçÁΩÆ
      - name: "Setup Git Identity"
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions@users.noreply.github.com"
          echo "üë§ Git user configured"

      # Ê≠•È™§9: Ê∑ªÂä†ÂèòÊõ¥
      - name: "Add Changes"
        if: ${{ env.DOWNLOAD_STATUS == 'Success' && env.NEW_FILES_COUNT > 0 }}
        run: |
          git add "$OUTPUT_DIR"
          echo "‚ûï Added $NEW_FILES_COUNT files to staging area"

      # Ê≠•È™§10: Êèê‰∫§ÂèòÊõ¥
      - name: "Commit Changes"
        if: ${{ env.DOWNLOAD_STATUS == 'Success' && env.NEW_FILES_COUNT > 0 }}
        run: |
          git commit -m "üåÖ Automated splash image update (+$NEW_FILES_COUNT) [skip ci]"
          echo "üíæ Changes committed"

      # Ê≠•È™§11: Êé®ÈÄÅÂèòÊõ¥
      - name: "Push Changes"
        if: ${{ env.DOWNLOAD_STATUS == 'Success' && env.NEW_FILES_COUNT > 0 }}
        run: |
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY"
          git push origin HEAD:$GITHUB_REF_NAME
          echo "üöÄ Changes pushed"

      # Ê≠•È™§12: ÊúÄÁªàÊä•Âëä
      - name: "Final Report"
        run: |
          echo "üèÅ WORKFLOW COMPLETED: $DOWNLOAD_STATUS"
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Run ID: $GITHUB_RUN_ID"
          echo "Repository: $GITHUB_REPOSITORY"
          echo "New files downloaded: $NEW_FILES_COUNT"
          
          if [ "$DOWNLOAD_STATUS" = "Failed" ]; then
            echo "::error::Splash image download failed"
            exit 1
          fi
