name: Bilibili Splash Download

on:
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug logging'
        required: false
        type: boolean
        default: false
  schedule:
    - cron: '0 * * * *'  # 每小时运行一次
  
  push:
    paths-ignore:
      - 'app_splash/**'

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  download-splash:
    name: "Download Bilibili Splash Images"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      OUTPUT_DIR: 'app_splash'
      SCRIPT_FILE: 'splash_downloader.py'
      LOG_FILE: 'splash.log'

    steps:
      # 步骤1: 准备环境
      - name: "Setup Environment"
        run: |
          echo "🛠️ WORKFLOW STARTED AT: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Run ID: $GITHUB_RUN_ID"
          echo "Debug Enabled: ${{ inputs.debug }}"
          echo "Existing splash directory:"
          ls -la $OUTPUT_DIR || true

      # 步骤2: 检出仓库
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步骤3: 设置Python环境
      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: "pip"

      # 步骤4: 安装依赖
      - name: "Install Dependencies"
        run: |
          echo "📦 Installing Python dependencies..."
          python -m pip install --upgrade pip
          pip install requests
          echo "✅ Dependencies installed"

      # 步骤5: 执行开屏图下载
      - name: "Download Splash Images"
        run: |
          set -euo pipefail
          
          # 构建命令行参数
          cmd_args=(
            "--output" "$OUTPUT_DIR"
            "--log-file" "$LOG_FILE"
          )
          
          if [ "${{ inputs.debug }}" = "true" ]; then
            cmd_args+=("--debug")
            echo "🐛 Debug mode enabled"
          fi
          
          echo "🚀 Starting splash image download..."
          
          # 执行下载命令
          if python "$SCRIPT_FILE" "${cmd_args[@]}"; then
            echo "DOWNLOAD_STATUS=Success" >> $GITHUB_ENV
            echo "✅ Download completed successfully"
          else
            echo "DOWNLOAD_STATUS=Failed" >> $GITHUB_ENV
            echo "❌ Download encountered errors"
          fi
          
          # 计算新文件数
          new_files=0
          if [ -d "$OUTPUT_DIR" ]; then
            new_files=$(find "$OUTPUT_DIR" -type f -name '*.jp*' -mmin -5 | wc -l) || 0
          fi
          echo "NEW_FILES_COUNT=$new_files" >> $GITHUB_ENV
          echo "📥 Downloaded $new_files new files"

      # 步骤6: 调试日志
      - name: "Debug Log"
        if: ${{ env.DOWNLOAD_STATUS != 'Success' || env.NEW_FILES_COUNT == 0 }}
        run: |
          echo "🔍 Download Log Contents:"
          cat "$LOG_FILE" || true
          
          # 检查常见问题
          if grep -q "API error" "$LOG_FILE"; then
            echo "::error::API returned an error"
          fi
          
          if grep -q "Invalid API response" "$LOG_FILE"; then
            echo "::error::API response structure is invalid"
          fi

      # 步骤7: 准备Git配置
      - name: "Setup Git Identity"
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions@users.noreply.github.com"
          echo "👤 Git user configured"

      # 步骤8: 添加变更
      - name: "Add Changes"
        if: ${{ env.DOWNLOAD_STATUS == 'Success' && env.NEW_FILES_COUNT > 0 }}
        run: |
          git add "$OUTPUT_DIR"
          echo "➕ Added $NEW_FILES_COUNT files to staging area"

      # 步骤9: 提交变更
      - name: "Commit Changes"
        if: ${{ env.DOWNLOAD_STATUS == 'Success' && env.NEW_FILES_COUNT > 0 }}
        run: |
          git commit -m "🌅 Automated splash image update (+$NEW_FILES_COUNT) [skip ci]"
          echo "💾 Changes committed"

      # 步骤10: 推送变更
      - name: "Push Changes"
        if: ${{ env.DOWNLOAD_STATUS == 'Success' && env.NEW_FILES_COUNT > 0 }}
        run: |
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY"
          git push origin HEAD:$GITHUB_REF_NAME
          echo "🚀 Changes pushed"

      # 步骤11: 最终报告
      - name: "Final Report"
        run: |
          echo "🏁 WORKFLOW COMPLETED: $DOWNLOAD_STATUS"
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Run ID: $GITHUB_RUN_ID"
          echo "New files downloaded: $NEW_FILES_COUNT"
          
          if [ "$DOWNLOAD_STATUS" = "Failed" ]; then
            echo "::error::Splash image download failed"
            exit 1
          fi
